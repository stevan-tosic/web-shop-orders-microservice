<?xml version="1.0"?>
<ruleset name="PHPCS Standards">
    <description>Coding standard.</description>

    <!-- There should not be any code in the bundle Resources directory. -->
    <exclude-pattern>*/Resources/*</exclude-pattern>
    <exclude-pattern>*/vendor/*</exclude-pattern>
    <exclude-pattern>*/tests/*</exclude-pattern>
    <exclude-pattern>*/config/migrations/*</exclude-pattern>
    <exclude-pattern>src/Kernel.php</exclude-pattern>

    <!-- Symfony follows the standards defined in the PSR-0, PSR-1 and PSR-2 documents. -->
    <config name="installed_paths" value="../../../vendor/escapestudios/symfony2-coding-standard"/><!-- relative path from PHPCS source location -->
    <!-- Include the whole PSR-1 standard -->
    <rule ref="PSR1"/>
    <!-- Include the whole PSR-2 standard -->
    <rule ref="PSR2"/>
    <rule ref="Symfony">
        <exclude name="Symfony.Commenting.License"/>
        <exclude name="Symfony.Functions.Arguments"/>
    </rule>
    <!--
    See the [documented coding standard](http://symfony.com/doc/current/contributing/code/standards.html)
    -->

    <rule ref="Generic.ControlStructures.InlineControlStructure"/>
    <rule ref="Generic.Formatting.SpaceAfterCast"/>
    <rule ref="Generic.Functions.CallTimePassByReference"/>
    <rule ref="Generic.NamingConventions.UpperCaseConstantName"/>
    <rule ref="Generic.PHP.LowerCaseConstant"/>
    <rule ref="Squiz.Arrays.ArrayBracketSpacing"/>
    <rule ref="Squiz.ControlStructures.ControlSignature"/>
    <rule ref="Squiz.ControlStructures.ForEachLoopDeclaration"/>
    <rule ref="Squiz.ControlStructures.ForLoopDeclaration"/>
    <rule ref="Squiz.ControlStructures.LowercaseDeclaration"/>
    <rule ref="Squiz.PHP.LowercasePHPFunctions"/>
    <rule ref="Squiz.Scope.MemberVarScope"/>
    <rule ref="Squiz.Strings.ConcatenationSpacing"/>

    <rule ref="Squiz.Strings.ConcatenationSpacing"/>

    <!-- We provide our own subclass of PEAR's ClassComment and FunctionComment sniff, but these will do: -->
    <rule ref="PEAR.Commenting.InlineComment"/>

    <!-- Import Zend coding standard (which in turn imports PEAR) -->
    <rule ref="Zend">
        <!-- but exclude their code analyzer -->
        <exclude name="Zend.Debug.CodeAnalyzer"/>

        <!-- covered by Squiz ControlSignature, which enforces try/catch as well -->
        <exclude name="PEAR.ControlStructures.ControlSignature"/>

        <exclude name="PEAR.Commenting.FunctionComment.SpacingBeforeTags"/>

        <!-- do not check line length -->
        <exclude name="Generic.Files.LineLength"/>

        <!-- covered by Squiz FunctionDeclarationSniff -->
        <exclude name="Generic.Functions.OpeningFunctionBraceBsdAllman.BraceOnSameLine"/>
    </rule>

    <!-- Don't enforce Zend's private member underscores -->
    <rule ref="Zend.NamingConventions.ValidVariableName.PrivateNoUnderscore">
        <severity>0</severity>
    </rule>

    <!-- Ignore variables that contains numbers -->
    <rule ref="Zend.NamingConventions.ValidVariableName.ContainsNumbers">
        <severity>0</severity>
    </rule>

    <!-- In practice, Symfony2 spaces multiline function calls differently than Zend -->
    <rule ref="PEAR.Functions.FunctionCallSignature.ContentAfterOpenBracket">
        <severity>0</severity>
    </rule>
    <rule ref="PEAR.Functions.FunctionCallSignature.SpaceAfterCloseBracket">
        <severity>0</severity>
    </rule>
    <rule ref="PEAR.Functions.FunctionCallSignature.CloseBracketLine">
        <severity>0</severity>
    </rule>

    <rule ref="Symfony.Commenting.FunctionComment.MissingParamComment">
        <severity>0</severity>
    </rule>

    <rule ref="Symfony.Commenting.FunctionComment.Missing">
        <type>error</type>
    </rule>

    <rule ref="Symfony.Commenting.ClassComment.Missing">
        <type>error</type>
    </rule>

    <rule ref="Symfony.Commenting.ClassComment.Blacklisted">
        <type>error</type>
    </rule>

    <rule ref="Symfony.Commenting.FunctionComment.MissingReturn">
        <type>error</type>
    </rule>

    <rule ref="Symfony.Commenting.FunctionComment.SpacingBeforeTags">
        <severity>0</severity>
    </rule>

    <rule ref="Symfony.Commenting.ClassComment.SpacingBeforeTags">
        <message>There should always be a description, followed by a blank line, before the tags of a class comment.</message>
    </rule>

    <rule ref="../vendor/slevomat/coding-standard/SlevomatCodingStandard/ruleset.xml">
        <!-- sniffs to exclude -->
        <exclude name="SlevomatCodingStandard.Namespaces.UnusedUses"/>
        <exclude name="SlevomatCodingStandard.Namespaces.ReferenceUsedNamesOnly"/>
        <exclude name="SlevomatCodingStandard.Namespaces.AlphabeticallySortedUses"/>
        <exclude name="SlevomatCodingStandard.Namespaces.FullyQualifiedExceptions"/>
        <exclude name="SlevomatCodingStandard.Namespaces.UseOnlyWhitelistedNamespaces"/>
        <exclude name="SlevomatCodingStandard.Namespaces.FullyQualifiedClassNameAfterKeyword"/>
        <exclude name="SlevomatCodingStandard.Namespaces.FullyQualifiedClassNameInAnnotation"/>
        <exclude name="SlevomatCodingStandard.ControlStructures.RequireYodaComparison"/>
        <exclude name="SlevomatCodingStandard.ControlStructures.LanguageConstructWithParentheses"/>
        <exclude name="SlevomatCodingStandard.ControlStructures.NewWithoutParentheses.UselessParentheses"/>
        <exclude name="SlevomatCodingStandard.Commenting.DocCommentSpacing"/>
        <exclude name="SlevomatCodingStandard.Commenting.RequireOneLinePropertyDocComment"/>
        <exclude name="SlevomatCodingStandard.Commenting.DisallowOneLinePropertyDocComment"/>
        <exclude name="SlevomatCodingStandard.ControlStructures.EarlyExit"/>
        <exclude name="SlevomatCodingStandard.ControlStructures.DisallowEmpty"/>
        <exclude name="SlevomatCodingStandard.ControlStructures.DisallowYodaComparison"/>
        <exclude name="SlevomatCodingStandard.ControlStructures.ControlStructureSpacing"/>
        <exclude name="SlevomatCodingStandard.ControlStructures.RequireMultiLineTernaryOperator"/>
        <exclude name="SlevomatCodingStandard.Classes.ClassConstantVisibility"/>
        <exclude name="SlevomatCodingStandard.Classes.SuperfluousInterfaceNaming"/>
        <exclude name="SlevomatCodingStandard.Classes.SuperfluousExceptionNaming"/>
        <exclude name="SlevomatCodingStandard.Classes.SuperfluousAbstractClassNaming"/>
        <exclude name="SlevomatCodingStandard.TypeHints.LongTypeHints"/>
        <exclude name="SlevomatCodingStandard.TypeHints.NullTypeHintOnLastPosition"/>
        <exclude name="SlevomatCodingStandard.TypeHints.TypeHintDeclaration.UselessDocComment"/>
        <exclude name="SlevomatCodingStandard.TypeHints.TypeHintDeclaration.MissingTraversableReturnTypeHintSpecification"/>
        <exclude name="SlevomatCodingStandard.TypeHints.TypeHintDeclaration.MissingTraversableParameterTypeHintSpecification"/>
        <exclude name="SlevomatCodingStandard.Operators.DisallowIncrementAndDecrementOperators"/>
        <exclude name="SlevomatCodingStandard.Operators.RequireCombinedAssignmentOperator"/>
        <exclude name="SlevomatCodingStandard.Files.TypeNameMatchesFileName"/>
        <exclude name="SlevomatCodingStandard.Functions.UnusedParameter"/>
        <exclude name="SlevomatCodingStandard.Functions.TrailingCommaInCall"/>
        <exclude name="SlevomatCodingStandard.Classes.EmptyLinesAroundClassBraces"/>
    </rule>

    <rule ref="SlevomatCodingStandard.TypeHints.TypeHintDeclaration">
        <type>warning</type>
        <properties>
            <property name="usefulAnnotations" type="array" value="@Route,@Template,@Cache,@Method,@ParamConverter,@Security"/>
        </properties>
    </rule>

    <rule ref="SlevomatCodingStandard.Classes.UnusedPrivateElements">
        <type>warning</type>
        <properties>
            <property name="alwaysUsedPropertiesAnnotations" type="array" value="@ORM\Column"/>
        </properties>
    </rule>

    <rule ref="SlevomatCodingStandard.TypeHints.DeclareStrictTypes">
        <type>warning</type>
        <properties>
            <property name="newlinesCountBetweenOpenTagAndDeclare" value="0"/>
            <property name="spacesCountAroundEqualsSign" value="1"/>
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.Exceptions.ReferenceThrowableOnly">
        <!-- Documentation: https://wiki.php.net/rfc/throwable-interface -->
        <type>warning</type>
    </rule>
    <rule ref="SlevomatCodingStandard.Functions.StaticClosure.ClosureNotStatic">
        <type>warning</type>
    </rule>
    <rule ref="SlevomatCodingStandard.TypeHints.NullableTypeForNullDefaultValue">
        <type>warning</type>
    </rule>
    <rule ref="SlevomatCodingStandard.Classes.SuperfluousAbstractClassNaming">
        <type>warning</type>
    </rule>
    <rule ref="SlevomatCodingStandard.Commenting.EmptyComment">
        <type>warning</type>
    </rule>
    <rule ref="SlevomatCodingStandard.Functions.UselessParameterDefaultValue">
        <type>warning</type>
    </rule>
    <rule ref="SlevomatCodingStandard.TypeHints.ReturnTypeHintSpacing">
        <type>warning</type>
    </rule>
    <rule ref="SlevomatCodingStandard.PHP.ShortList">
        <type>warning</type>
    </rule>
    <rule ref="SlevomatCodingStandard.ControlStructures.RequireNullCoalesceOperator">
        <type>warning</type>
    </rule>
    <rule ref="SlevomatCodingStandard.Classes.DisallowLateStaticBindingForConstants">
        <type>warning</type>
    </rule>
    <rule ref="SlevomatCodingStandard.ControlStructures.RequireShortTernaryOperator">
        <type>warning</type>
    </rule>
    <rule ref="SlevomatCodingStandard.TypeHints.ParameterTypeHintSpacing">
        <type>warning</type>
    </rule>
    <rule ref="SlevomatCodingStandard.ControlStructures.AssignmentInCondition">
        <type>warning</type>
    </rule>
    <rule ref="SlevomatCodingStandard.Classes.ModernClassNameReference">
        <type>warning</type>
    </rule>
    <rule ref="SlevomatCodingStandard.TypeHints.DisallowMixedTypeHint">
        <type>warning</type>
    </rule>
    <rule ref="SlevomatCodingStandard.TypeHints.DisallowArrayTypeHintSyntax">
        <type>warning</type>
    </rule>
    <rule ref="SlevomatCodingStandard.ControlStructures.UselessIfConditionWithReturn">
        <type>warning</type>
    </rule>
    <rule ref="SlevomatCodingStandard.Classes.SuperfluousTraitNaming">
        <type>warning</type>
    </rule>
</ruleset>
